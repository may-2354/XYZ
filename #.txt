; 1.Macro,syscall,data section ,text section
section .data
    msg db "Hello world!", 0ah
    msg_len equ $-msg
    msg1 db "First assembly language program",0ah
    msg1_len equ $-msg1
    msg2 db "Assignment no 1",0ah
    msg2_len equ $-msg2
;------------------------------------
%macro Print 2
    mov rax,1
    mov rdi,1
    mov rsi,%1
    mov rdx,%2
    syscall
%endmacro

%macro Read 2
    mov rax,0
    mov rdi,0
    mov rsi,%1
    mov rdx,%2
    syscall
%endmacro

%macro exit 0
    mov rax,60
    mov rdi,0
    syscall
%endmacro
;------------------------
section .text
    global _start

_start:
    Print msg,msg_len
    Print msg1,msg1_len
    Print msg2,msg2_len
exit
;-------------------------------------------------------------------------------------------------------------
;2. Enter string and calculate its length
section .data
    msg db "Enter your String:", 0ah
    msg_len equ $-msg
    msg1 db "Length of your String is:"
    msg1_len equ $-msg1

section .bss
    buf resb 200
    buf_len equ $-buf
    char_ans resb 4
    
%macro Print 2
    mov rax,1
    mov rdi,1
    mov rsi,%1
    mov rdx,%2
    syscall
%endmacro

%macro Read 2
    mov rax,0
    mov rdi,0
    mov rsi,%1
    mov rdx,%2
    syscall
%endmacro

%macro exit 0
    mov rax,60
    mov rdi,0
    syscall
%endmacro

section .text
    global _start

_start:
    Print msg,msg_len
    Read buf,buf_len
    dec rax
    call display

    exit
display:
    mov rsi,char_ans+3 ; HEX to ASCII(character) display
    mov rcx,4 ; counter
    mov rbx,16 ; HEX number
next_digit:
    mov rdx,0
    div rbx
    cmp dl,9
    jbe add30
    add dl,07h
add30:
    add dl,30h
    mov [rsi],dl
    dec rsi
    dec rcx
    jnz next_digit
    Print msg1,msg1_len
    Print char_ans,16
    ret

;3.Count of positive and negative numbers
;----------------------------------------
section .data
    pmsg db 10,"Count of positive numbers:"
    pmsg_len equ $-pmsg
    nmsg db 10,"Count of negative numbers:"
    nmsg_len equ $-nmsg

    arr64 dq -11H,-22H,-33H,-44H,-55H,-66H,-77H,-88H,-99H,-111H
    n equ 10
    nline db 10
    nline_len equ $-nline
;-----------------------------------------------
section .bss
    n_count resd 1
    p_count resd 1
    char_ans resb 2
;------------------------------------------------
    %macro Read 2
    mov rax,0
    mov rdi,0
    mov rsi,%1
    mov rdx,%2
    syscall
    %endmacro

    %macro Print 2
    mov rax,1
    mov rdi,1
    mov rsi,%1
    mov rdx,%2
    syscall
    %endmacro

    %macro exit 0
    mov rax,60
    mov rdi,0
    syscall
    %endmacro
;--------------------------------------------

section .text
    global _start

_start:
    mov rsi, arr64
    mov rbx, 0
    mov rdx, 0
    mov rcx, n
    
next_num:
    mov rax,[rsi]
    shl rax,1
    jc negative

positive:
    inc rbx
    jmp next

negative:
    inc rdx

next:
    add rsi,4
    dec rcx
    jnz next_num
    mov [p_count],rbx
    mov [n_count],rdx
    Print pmsg,pmsg_len
    mov rax,[p_count]
    call display

    Print nmsg,nmsg_len
    mov rax,[n_count]
    call display
    Print nline,nline_len
    
    exit
;-----------------------------------------------------
display:
    mov rbx,16
    mov rcx,2
    mov rsi,char_ans + 1
cnt:
    mov rdx,0
    div rbx

    cmp dl,09h
    jbe add30
    add dl,07h
add30:
    add dl,30h
    mov [rsi],dl
    dec rsi
    dec rcx
    jnz cnt

    Print char_ans,2
    ret
;----------------------------------------------

;4.HEX to BCD
section .data
    msg db "Enter the valid HEX number:"
    msg_len equ $-msg
    msg1 db 10,"The BCD form of the entered HEX number is:"
    msg1_len equ $-msg1
    err db 10,"Entered the invalid hex number"
    err_len equ $-err
    nline db 10
    nline_len equ $-nline
;-----------------------------------------------------------------
section .bss
    buf resb 5
    ans resb 16
    char_ans resb 5
;-----------------------------------------------------------------
 %macro Read 2
    mov rax,0
    mov rdi,0
    mov rsi,%1
    mov rdx,%2
    syscall
    %endmacro

    %macro Print 2
    mov rax,1
    mov rdi,1
    mov rsi,%1
    mov rdx,%2
    syscall
    %endmacro

    %macro exit 0
    mov rax,60
    mov rdi,0
    syscall
    %endmacro
;--------------------------------------------
section .text
    global _start

_start:
    call HEX_BCD
    exit
;---------------------------------------------
HEX_BCD:
    Print msg,msg_len 
    Read buf,5
    mov rsi,buf
    xor bx,bx
    mov rcx,4
next:
    shl bx,4
    mov al,[rsi]
    
    cmp al,'0'
    jb error
    cmp al,'9'
    jbe sub30h

    cmp al,'A'
    jb error
    cmp al,'F'
    jbe sub37h

    cmp al,'a'
    jb error
    cmp al,'f'
    jbe sub57h

    jmp error

sub37h:sub al,07h
sub57h:sub al,20h
sub30h:sub al,30h

    add bx,ax
    inc rsi
    dec rcx
    jnz next
    mov [ans],bx
    Print msg1,msg1_len
    
    mov ax,[ans]
    call display10
    ret
error:
    Print err,err_len
    Print nline,nline_len
    call HEX_BCD
    exit
;------------------------------------------------------
display10:
    mov rbx,10
    mov rcx,5
    mov rsi,char_ans + 4
cnt:
    mov rdx,0
    div rbx

    cmp dl,09h
    jbe add30
    add dl,07h
add30:
    add dl,30h
    mov [rsi],dl
    dec rsi
    dec rcx
    jnz cnt

    Print char_ans,5
    ret
;----------------------------------------------

;5.BCD to HEX
section .data
    bmsg db 10,"Enter 5 digit BCD number :: "
    bmsg_len equ $-bmsg
    ehmsg db 10,"The Equivalent HEX number is :: "
    ehmsg_len equ $-ehmsg

section .bss
    buf resb 6
    char_ans resb 4
    ans resw 1

%macro Print 2
    mov rax,1
    mov rdi,1
    mov rsi,%1
    mov rdx,%2
    syscall
%endmacro

%macro Read 2
    mov rax,0
    mov rdi,0
    mov rsi,%1
    mov rdx,%2
    syscall
%endmacro

%macro Exit 0
    mov rax,60
    mov rdi,0
    syscall
%endmacro

section .text
    global _start

_start:
    call BCD_HEX
    Exit

BCD_HEX:
    Print bmsg,bmsg_len
    Read buf,6 ; 5 digit + 1 enter
    mov rsi,buf ; Points at the start of buffer
    xor ax,ax ; Previous digit = 0
    mov rbp,5 ; counter
    mov rbx,10 ; multiplier
next:
    xor cx,cx ; contains next digit each time
    mul bx ; ax = ax * bx
    mov cl,[rsi]
    sub cl,30h
    add ax,cx
    inc rsi ; Point at the next digit
    dec rbp
    jnz next
    mov [ans],ax ; Store ax in ans because ax get change in Print macro
    Print ehmsg,ehmsg_len
    mov ax,[ans]
    call Disp_16 ; Print hex number
    ret

Disp_16:
    mov rsi,char_ans+3 ; HEX to ASCII(character) display
    mov rcx,4 ; counter
    mov rbx,16 ; HEX number
next_digit:
    mov rdx,0
    div rbx
    cmp dl,9
    jbe add30
    add dl,07h
add30:
    add dl,30h
    mov [rsi],dl
    dec rsi
    dec rcx
    jnz next_digit
    Print char_ans,4
    ret
;---------------------------------------------------------------------

;6a.Non overlapped block transfer without string specific instructions

section .data
    sblock db 10h,20h,30h,40h,50h,60h,70h
    dblock db 0h,0h,0h,0h,0h,0h,0h
    msg db 10,"S block before transfer:"
    msg_len equ $-msg
    msg1 db 10,"D block before transfer:"
    msg1_len equ $-msg1
    amsg db 10,"S block after transfer:"
    amsg_len equ $-amsg
    amsg1 db 10,"D block after transfer:"
    amsg1_len equ $-amsg1
    space db " "
;-----------------------------------------------------
section .bss
    buf resb 5
    ans resb 16
    char_ans resb 2
;-----------------------------------------------------------------
 %macro Read 2
    mov rax,0
    mov rdi,0
    mov rsi,%1
    mov rdx,%2
    syscall
    %endmacro

    %macro Print 2
    mov rax,1
    mov rdi,1
    mov rsi,%1
    mov rdx,%2
    syscall
    %endmacro

    %macro exit 0
    mov rax,60
    mov rdi,0
    syscall
    %endmacro
;--------------------------------------------
section .text
    global _start

_start:
    Print msg,msg_len
    mov rsi,sblock
    call display_block
    
    Print msg1,msg1_len
    mov rsi,dblock
    call display_block

    call block_transfer

    Print amsg,amsg_len
    mov rsi,sblock
    call display_block

    Print amsg1,amsg1_len
    mov rsi,dblock
    call display_block
exit
;------------------------------------------------
block_transfer:
    mov rsi,sblock
    mov rdi,dblock
    mov rcx,7
next_block:
    mov al,[rsi]                 ;for with string
    mov [rdi],al                 ;cld
    inc rsi                      ;rep movsb
    inc rdi                      ;ret
    dec rcx
    jnz next_block
    ret
;-------------------------------------------------
display_block:
    mov rbp,7
next_num:
    mov al,[rsi]
    push rsi
    call display
    Print space ,1
    pop rsi
    inc rsi
    dec rbp
    jnz next_num
    ret
;------------------------------------------------
display:
    mov rbx,16
    mov rcx,7
    mov rsi,char_ans + 1
cnt:
    mov rdx,0
    div rbx
    cmp dl,09h
    jbe add30
    add dl,07h
add30:
    add dl,30h
    mov [rsi],dl
    dec rsi
    dec rcx
    jnz cnt
    Print char_ans,2
    ret
;------------------------------------------------
   
;7a. overlapped block transfer without string specific instructions 
section .data
    sblock db 11h,12h,13h,14h,15h
    dblock db 0h,0h,0h,0h,0h
    msg db 10,"S block before transfer:"
    msg_len equ $-msg
    msg1 db 10,"D block before transfer:"
    msg1_len equ $-msg1
    amsg db 10,"S block after transfer:"
    amsg_len equ $-amsg
    amsg1 db 10,"D block after transfer:"
    amsg1_len equ $-amsg1
    space db " "
;-----------------------------------------------------
section .bss
    buf resb 5
    ans resb 16
    char_ans resb 2
;-----------------------------------------------------------------
 %macro Read 2
    mov rax,0
    mov rdi,0
    mov rsi,%1
    mov rdx,%2
    syscall
    %endmacro

    %macro Print 2
    mov rax,1
    mov rdi,1
    mov rsi,%1
    mov rdx,%2
    syscall
    %endmacro

    %macro exit 0
    mov rax,60
    mov rdi,0
    syscall
    %endmacro
;--------------------------------------------
section .text
    global _start

_start:
    Print msg,msg_len
    mov rsi,sblock
    call display_block
    
    Print msg1,msg1_len
    mov rsi,dblock-2
    call display_block

    call block_transfer

    Print amsg,amsg_len
    mov rsi,sblock
    call display_block

    Print amsg1,amsg1_len
    mov rsi,dblock-2
    call display_block
exit
;------------------------------------------------
block_transfer:
    mov rsi,sblock+4
    mov rdi,dblock+2
    mov rcx,5
next_block:
    mov al,[rsi]                  ;for with string transfer
    mov [rdi],al                  ;std
    dec rsi                       ;rep movsb
    dec rdi                       ;ret
    dec rcx
    jnz next_block
    ret
;-------------------------------------------------
display_block:
    mov rbp,5
next_num:
    mov al,[rsi]
    push rsi
    call display
    Print space ,1
    pop rsi
    inc rsi
    dec rbp
    jnz next_num
    ret
;------------------------------------------------
display:
    mov rbx,16
    mov rcx,5
    mov rsi,char_ans + 1
cnt:
    mov rdx,0
    div rbx
    cmp dl,09h
    jbe add30
    add dl,07h
add30:
    add dl,30h
    mov [rsi],dl
    dec rsi
    dec rcx
    jnz cnt
    Print char_ans,2
    ret
;----------------------------------------------------------------------------------------------------------------------------
    
;8.GDTR,IDTR,LDTR,TR,MSW
section .data
    msg db 10,"The value in the GDTR is:"
    msg_len equ $-msg
    msg1 db 10,"The value in the IDTR is:"
    msg1_len equ $-msg1
    msg2 db 10,"The value in the LDTR is:"
    msg2_len equ $-msg2
    msg3 db 10,"The value in the TR is:"
    msg3_len equ $-msg3
    msg4 db 10,"The value in the MSW is:"
    msg4_len equ $-msg4

    protected db 10,"The protected mode is ON"
    protected_len equ $-protected
    non_protected db 10,"The protected mode is OFF"
    non_protected_len equ $-non_protected

    space db " "
;-----------------------------------------------------
section .bss
    LDTR resw 1
    GDTR resw 3
    IDTR resw 3
    MSW resw 1
    TR resw 1
    char_ans resb 16
;-----------------------------------------------------------------
 %macro Read 2
    mov rax,0
    mov rdi,0
    mov rsi,%1
    mov rdx,%2
    syscall
    %endmacro

    %macro Print 2
    mov rax,1
    mov rdi,1
    mov rsi,%1
    mov rdx,%2
    syscall
    %endmacro

    %macro exit 0
    mov rax,60
    mov rdi,0
    syscall
    %endmacro
;--------------------------------------------
section .text
    global _start

_start:
      SMSW [MSW]
      SGDT [GDTR]
      SIDT [IDTR]
      SLDT [LDTR]
      STR [TR]

      Print msg,msg_len
      mov ax,[GDTR+4]
      call display
      mov ax,[GDTR+2]
      call display
      mov ax,[GDTR]
      call display

      Print msg1,msg1_len
      mov ax,[IDTR+4]
      call display 
      mov ax,[IDTR+2]
      call display
      mov ax,[IDTR]
      call display

      Print msg2,msg2_len
      mov ax,[LDTR]
      call display

      Print msg3,msg3_len
      mov ax,[TR]
      call display

      Print msg4,msg4_len
      mov ax,[MSW]
      call display

      mov ax,[MSW]
      shr ax,1
      jc protectedOn

      Print non_protected,non_protected_len
      jmp end
protectedOn:
    Print protected,protected_len
end:
    exit
;--------------------------------------------------------------
display:
    mov rbx,16
    mov rcx,16
    mov rsi,char_ans + 15
cnt:
    mov rdx,0
    div rbx
    cmp dl,09h
    jbe add30
    add dl,07h
add30:
    add dl,30h
    mov [rsi],dl
    dec rsi
    
    dec rcx
    jnz cnt
    
    Print char_ans,16
    ret
;-----------------------------------------------------------------------------------------------
    
       

   

    
      
    
    